.. _metrics:

Metrics
==================

.. toctree::
   :maxdepth: 2

Porosity
----------
Porosity, the scalar metric, is computed internally by counting the number of pore voxels with subsequent normalization over the total number of voxels in the considered volume.

This metric is implemented using :doc:`class Porosity. <../_autosummary/revanalyzer.metrics.porosity.Porosity>`


Permeability
------------
Permeability, the scalar metric, can be computed using externally by two ways.

First, FDMSS, the external solver of Stokes’s equation with 4th order spatial accuracy scheme can be used.
To run FMDSS for all the chosen subcubes one can call :doc:`FDMSS generator. <../_autosummary/revanalyzer.generators.permeability_fdmss_generator.generate_permeability_fdmss>`

Second, PNM-extractor and MEF modules should be sequentially run.
To run them for all the chosen subcubes one can call :doc:`MEF generator. <../_autosummary/revanalyzer.generators.permeability_mef_generator.generate_permeability_mef>`

The permeability metric is implemented using :doc:`class Permeability. <../_autosummary/revanalyzer.metrics.permeability.Permeability>`

Euler density
-------------
Euler density, the scalar metric, describing the topological properties of 3D image, is computed by the normalization of Euler number :math:`\chi`  over the total number of voxels in the considered volume.
One can use its correct (:doc:`class EulerDensityI <../_autosummary/revanalyzer.metrics.euler_density_i.EulerDensityI>`) and approximate (:doc:`class EulerDensityII <../_autosummary/revanalyzer.metrics.euler_density_ii.EulerDensityII>`) values.

The correct Euler number for a given voxel domain can be calculated using the following expression (Vogel, H. J., Weller, U., & Schlüter, S. (2010). Quantification of soil structure based on Minkowski functions. Computers & Geosciences, 36(10), 1236-1245):

.. math::

   \chi = \# vertices - \# edges + \# faces - \# volumes,
   
where :math:`\#` means 'number of'. The correct Euler densities are computed internally using julia library.

One can also use the approximate expression for Euler number using the characteristics of pore-network model (PNM), extracted from 3D image (see the next subsection):

.. math::

   \chi \approx N_p - N_t,
   
where :math:`N_p` and :math:`N_t` are pores and throat numbers given by PNM.

PNM characteristics
-------------------
Pore-network models (PNM) divide the void space of the 3D image into pores representing wider regions that are connected through narrower restrictions called throats. 
Coonectivity (also called coordination number) for a single pore is defined as the number of thoats, connecting the given pore with the other ones.

Here, we consider 6 scalar PNM-based metrics:

	* pore number (:doc:`class PoreNumber <../_autosummary/revanalyzer.metrics.pore_number.PoreNumber>`),
	* throat number (:doc:`class ThroatNumber <../_autosummary/revanalyzer.metrics.throat_number.ThroatNumber>`),
	* mean pore radius (:doc:`class MeanPoreRadius <../_autosummary/revanalyzer.metrics.mean_pore_radius.MeanPoreRadius>`),
	* mean throat radius (:doc:`class MeanThroatRadius <../_autosummary/revanalyzer.metrics.mean_throat_radius.MeanThroatRadius>`),
	* mean connectivity (:doc:`class MeanConnectivity <../_autosummary/revanalyzer.metrics.mean_connectivity.MeanConnectivity>`),
	* approximate Euler density (:doc:`class EulerDensityII <../_autosummary/revanalyzer.metrics.euler_density_ii.EulerDensityII>`, also see the previous subsection).

We also consider 3 vector PNM-based metrics:

	* pore radius (:doc:`class PoreRadius <../_autosummary/revanalyzer.metrics.pore_radius.PoreRadius>`),
	* throat radius (:doc:`class ThroatRadius <../_autosummary/revanalyzer.metrics.throat_radius.ThroatRadius>`), 
	* connectivity (:doc:`class Connectivity <../_autosummary/revanalyzer.metrics.connectivity.Connectivity>`).

Pore, throat radii and connectivities can be presented as 1d histograms (see the figure below). These histograms can be vectorized using PNM vectorizer (:doc:`class PNMVectorizer <../_autosummary/revanalyzer.vectorizers.pnm_vectorizer.PNMVectorizer>`).

.. image:: images/fig_pnm.png
    :align: center

Generation of PNM characteristics is performed in two steps. First, one can use PNM-extractor for the generation of output files in 'statoil' format.
To run FMDSS for all the chosen subcubes one can call :doc:`PNM generator. <../_autosummary/revanalyzer.generators.pnm_generator.generate_PNM>`
Afterwards, PNM-based metrics can be computed internally using generated statoil outputs.

Correlation functions
---------------------
We consider 4 types of correlation functions (CFs): 

	* two-point probability function :math:`S_2(\boldsymbol{r})` (:doc:`class S2 <../_autosummary/revanalyzer.metrics.cf.S2>`),
	* lineal function :math:`L_2(\boldsymbol{r})` (:doc:`class L2 <../_autosummary/revanalyzer.metrics.cf.L2>`),
	* cluster function :math:`C_2(\boldsymbol{r})` (:doc:`class C2 <../_autosummary/revanalyzer.metrics.cf.C2>`), 
	* surface-surface function :math:`SS_2(\boldsymbol{r})` (:doc:`class SS2 <../_autosummary/revanalyzer.metrics.cf.SS2>`). 
	
Each correlation function measures a probability of some event for a given correlation length :math:`\boldsymbol{r}`. Specifically, :math:`S_2(\boldsymbol{r})` measures the probability that both ends of the :math:`\boldsymbol{r}` line segment lie within pore phase, 
:math:`L_2(\boldsymbol{r})` — the probability that the whole segment lies within the pore space, :math:`C_2(\boldsymbol{r})` — that both ends of the segment lie within the same pore cluster, 
and :math:`SS_2(\boldsymbol{r})` — that both ends fall into a pore-solid interface. The correlation length :math:`\boldsymbol{r}` was chosen to vary from 0 to a half of total linear size (in voxels) of the studied sample. 
Any additional details on different CFs can be found in comprehensive Torquato’s book (Torquato S. (2002) Random Heterogeneous Materials: Microstructure and Macroscopic Properties (SpringerVerlag, New York).

The CFs ara computed internally using julia library along three major orthogonal directions :math:`x`, :math:`y` and :math:`z` exclusively for the pore phase. 
They can be normalized to satisfy the condition CF(:math:`\boldsymbol{r} = 0`) (Karsanina et al. (2021). Compressing soil structural information into parameterized correlation functions. European Journal of Soil Science, 72(2), 561-577).
The example of computed CFs for a cubical :math:`500^3` voxels sample are presented at the figure below.

.. image:: images/fig_cf.png
    :align: center
  
The computed CFs can be vectorized using CF vectorizer (:doc:`CFVectorizer <../_autosummary/revanalyzer.vectorizers.cf_vectorizer.CFVectorizer>`).

Persistence diagrams
--------------------
Persistence diagram (PD) is 2D visualization of persistent homology analysis applied to some 3D domain. PDs provide the scales of topological features and clarify the geometric relationships among them.
The total set of persistent pairs located in 2D coordinate plane form a persistence diagram :math:`\mathrm{PD}_k`. We condider 3 PD-based vector metrics:

	* :math:`\mathrm{PD}_0` (:doc:`class PD0 <../_autosummary/revanalyzer.metrics.pd.PD0>`),
	* :math:`\mathrm{PD}_1` (:doc:`class PD1 <../_autosummary/revanalyzer.metrics.pd.PD1>`),
	* :math:`\mathrm{PD}_2` (:doc:`class PD2 <../_autosummary/revanalyzer.metrics.pd.PD2>`).

:math:`\mathrm{PD}_0` represents the births and deaths of connected components, :math:`\mathrm{PD}_1` — the births and deaths of 1-cycles (rings), and :math:`\mathrm{PD}_2` — the births and deaths of 2-cycles (cavities).
The example of computed PDs are presented at the figure below.

.. image:: images/fig_pd.png
    :align: center

PDs can be generated using external package. To run it for all the chosen subcubes one can call :doc:`PD generator <../_autosummary/revanalyzer.generators.pd_generator.generate_PD>`.
The generated PD data can be vectorized using 4 different vectorizers:

	* :doc:`SimpleBinningVectorizer <../_autosummary/revanalyzer.vectorizers.simple_binning_vectorizer.SimpleBinningVectorizer>`,
	* :doc:`PersistenceImageVectorizer <../_autosummary/revanalyzer.vectorizers.persistence_image_vectorizer.PersistenceImageVectorizer>`,
	* :doc:`LandscapeVectorizer <../_autosummary/revanalyzer.vectorizers.landscape_vectorizer>`,
	* :doc:`SilhouetteVectorizer <../_autosummary/revanalyzer.vectorizers.silhouette_vectorizer.SilhouetteVectorizer>`.
